{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "syn-demo-sqlserver"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"BLOB_kidemostorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BLOB_kidemostorage'"
		},
		"syn-demo-sqlserver-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'syn-demo-sqlserver-WorkspaceDefaultSqlServer'"
		},
		"syn-demo-sqlserver-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://syndemoadlsgen2.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Pl_load_customer')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "SourcetoStg",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SourcetoStg",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerSource": {},
									"CustomerStage": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "BLOB_kidemostorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "sourcefiles/input"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StgtoDim",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SourcetoStg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StgtoDim",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerStage": {},
									"CustomerView": {},
									"CustomerDimInsert": {},
									"CustomerDimUpdate": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "BLOB_kidemostorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "sourcefiles/input"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/SourcetoStg')]",
				"[concat(variables('workspaceId'), '/linkedServices/BLOB_kidemostorage')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/dataflows/StgtoDim')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CustomerBlobSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BLOB_kidemostorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customer_data.csv",
						"folderPath": "input",
						"container": "sourcefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/BLOB_kidemostorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CustomerDim')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "SKCustID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Email",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "Address",
						"type": "nvarchar"
					},
					{
						"name": "IsActive",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsertDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ValidFromDate",
						"type": "date"
					},
					{
						"name": "ValidToDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "KI_Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CustomerStaging')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Email",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "Address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "KI_Customer_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CustomerView')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "SKCustID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Email",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "Address",
						"type": "nvarchar"
					},
					{
						"name": "IsActive",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsertDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ValidFromDate",
						"type": "date"
					},
					{
						"name": "ValidToDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "KI_Customer_V"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BLOB_kidemostorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('BLOB_kidemostorage_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-demo-sqlserver-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('syn-demo-sqlserver-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-demo-sqlserver-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('syn-demo-sqlserver-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourcetoStg')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerBlobSource",
								"type": "DatasetReference"
							},
							"name": "CustomerSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerStaging",
								"type": "DatasetReference"
							},
							"name": "CustomerStage"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tskipLines: 1) ~> CustomerSource\nCustomerSource sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tEmail as string,\n\t\tGender as string,\n\t\tCountry as string,\n\t\tAddress as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCustomerID = Column_1,\n\t\tFirstName = Column_2,\n\t\tLastName = Column_3,\n\t\tEmail = Column_4,\n\t\tGender = Column_5,\n\t\tCountry = Column_6,\n\t\tAddress = Column_7\n\t)) ~> CustomerStage"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CustomerBlobSource')]",
				"[concat(variables('workspaceId'), '/datasets/CustomerStaging')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StgtoDim')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerStaging",
								"type": "DatasetReference"
							},
							"name": "CustomerStage"
						},
						{
							"dataset": {
								"referenceName": "CustomerView",
								"type": "DatasetReference"
							},
							"name": "CustomerView"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerDim",
								"type": "DatasetReference"
							},
							"name": "CustomerDimInsert"
						},
						{
							"dataset": {
								"referenceName": "CustomerDim",
								"type": "DatasetReference"
							},
							"name": "CustomerDimUpdate"
						}
					],
					"transformations": [
						{
							"name": "HashSource"
						},
						{
							"name": "HashDimension"
						},
						{
							"name": "ExistsHashInsert"
						},
						{
							"name": "Insertattributes"
						},
						{
							"name": "ExistsHashUpdate"
						},
						{
							"name": "Updateattributes"
						},
						{
							"name": "AlterDim"
						}
					],
					"script": "source(output(\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tEmail as string,\n\t\tGender as string,\n\t\tCountry as string,\n\t\tAddress as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> CustomerStage\nsource(output(\n\t\tSKCustID as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tEmail as string,\n\t\tGender as string,\n\t\tCountry as string,\n\t\tAddress as string,\n\t\tIsActive as integer,\n\t\tInsertDate as timestamp,\n\t\tValidFromDate as date,\n\t\tValidToDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> CustomerView\nCustomerStage derive(SrcHash = md5(CustomerID,FirstName,LastName,Email)) ~> HashSource\nCustomerView derive(DimHash = md5(CustomerID,FirstName,LastName,Email)) ~> HashDimension\nHashSource, HashDimension exists(SrcHash == DimHash,\n\tnegate:true,\n\tbroadcast: 'auto')~> ExistsHashInsert\nExistsHashInsert derive(Gender = case(case( Gender=='Male',1,Gender=='Female',2)==1,'Male',\r\n     case( Gender=='Male',1,Gender=='Female',2)==2,'Female'),\n\t\tIsActive = 1,\n\t\tInsertDate = currentUTC('dd-MM-yyyy hh:mm'),\n\t\tValidFromDate = currentUTC('dd-MM-yyyy'),\n\t\tValidToDate = toDate('99993112','yyyyddMM')) ~> Insertattributes\nHashDimension, HashSource exists(DimHash == SrcHash,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsHashUpdate\nExistsHashUpdate derive(IsActive = 0,\n\t\tInsertDate = currentUTC('dd-MM-yyyy hh:mm'),\n\t\tValidToDate = currentUTC('dd-MM-yyyy')) ~> Updateattributes\nUpdateattributes alterRow(updateIf(true())) ~> AlterDim\nInsertattributes sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSKCustID as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tEmail as string,\n\t\tGender as string,\n\t\tCountry as string,\n\t\tAddress as string,\n\t\tIsActive as integer,\n\t\tInsertDate as timestamp,\n\t\tValidFromDate as date,\n\t\tValidToDate as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCustomerID,\n\t\tFirstName,\n\t\tLastName,\n\t\tEmail,\n\t\tGender,\n\t\tCountry,\n\t\tAddress,\n\t\tIsActive,\n\t\tInsertDate,\n\t\tValidFromDate,\n\t\tValidToDate\n\t)) ~> CustomerDimInsert\nAlterDim sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSKCustID as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tEmail as string,\n\t\tGender as string,\n\t\tCountry as string,\n\t\tAddress as string,\n\t\tIsActive as integer,\n\t\tInsertDate as timestamp,\n\t\tValidFromDate as date,\n\t\tValidToDate as date\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['SKCustID','CustomerID'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tSKCustID,\n\t\tCustomerID,\n\t\tFirstName,\n\t\tLastName,\n\t\tEmail,\n\t\tGender,\n\t\tCountry,\n\t\tAddress,\n\t\tIsActive,\n\t\tInsertDate,\n\t\tValidFromDate,\n\t\tValidToDate\n\t)) ~> CustomerDimUpdate"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CustomerStaging')]",
				"[concat(variables('workspaceId'), '/datasets/CustomerView')]",
				"[concat(variables('workspaceId'), '/datasets/CustomerDim')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DemoSQLPool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"currentServiceObjectiveName": "DW100c",
				"annotations": []
			},
			"dependsOn": []
		}
	]
}